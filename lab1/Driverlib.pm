###############################################################
# Driverlib.pm - A package of helper functions for Perl drivers
# 
# Copyright (c) 2005 David R. O'Hallaron, All rights reserved.
###############################################################

package Driverlib;

use Socket;

# Autogenerated header file with lab-specific constants
use lib ".";
use Driverhdrs;

require Exporter;
@ISA = qw(Exporter);
@EXPORT = qw(
	     driver_post
	     );

use strict;

#####
# Public functions
#

#
# driver_post - This is the routine that a driver calls when 
#    it needs to transmit an autoresult string to the result server.
#
sub driver_post ($$) {
    my $userid = shift;       # User id for this submission
    my $result = shift;       # Autoresult string
    my $autograded = shift;   # Set if called by an autograder
    my $password = shift;     # User password   added by gy 2021.11.2 

    # Echo the autoresult string to stdout if the driver was called
    # by an autograder
    if ($autograded) {
        print "\n";
        print "AUTORESULT_STRING=$result\n";
        return;
    }	

    # If the driver was called with a specific userid, then submit
    # the autoresult string to the result server over the Internet.
    if ($userid && $password) {
        my $status =     
                     submitr($Driverhdrs::SERVER_NAME, 
                             $Driverhdrs::SERVER_PORT, 
                             $Driverhdrs::COURSE_NAME, 
                             $userid, 
			     $password,
                             $Driverhdrs::LAB, 
                             $result);
       
        # Print the status of the transfer     masked by guoyan 2019.12.11
       # if (!($status =~ /OK/)) {
       #     print "$status\n";
       #     print "Did not send autoresult string to the result server.\n";
       #     exit(1);
       # }
       if($status==2){
          print "Error: send information to the server failed.\n";}
       if($status==3){
          print "Error: send bits.c to the server failed.\n";}
       if($status==4){
          print "Error: open bits.c failed.\n";}
       if($status==1){
          print "Error: Userid or password is invalid.\n";}
       if($status==0){
          print "Success: Sent autoresult string for $userid to the result server.\n";}
    }	
}


#####
# Private functions
#

#
# submitr - Sends an autoresult string to the result server
#
sub submitr ($$$$$$) {
    my $hostname = shift;
    my $port = shift;
    my $course = shift;
    my $userid = shift;
    my $password = shift;
    my $lab = shift;
    my $result = shift;

    my $internet_addr;
    my $enc_result;
    my $paddr;
    my $line;
    my $http_version;
    my $errcode;
    my $errmsg;

    my $source_file = "bits.c";   #added by guoyan 2019.12.11
    my $buffer;

    my $info_valid;
    
    my $status;
   
    # Establish the connection to the server~~~~~~~~~~~~~~~~~~~~~~~~~1
    print "Establish the connection to the server $hostname, port $port\n";
    socket(SERVER, PF_INET, SOCK_STREAM, getprotobyname('tcp'));
    $internet_addr = inet_aton($hostname)
        or die "Could not convert $hostname to an internet address: $!\n";
    $paddr = sockaddr_in($port, $internet_addr);
    connect(SERVER, $paddr)
        or die "Could not connect to $hostname:$port:$!\n";
     
    select((select(SERVER), $| = 1)[0]); # enable command buffering
    
    # Send HTTP request to server
    print "Send request to server\n";
    $enc_result = url_encode($result);
     print "Sending information to the server\n";
    $status = print SERVER  "GET /$course/submitr.pl/?userid=$userid&password=$password&lab=$lab&result=$enc_result&submit=submit HTTP/1.0\r\n\r\n";
    #print "1. status is $status.\n";
    if($status == 0)
    {
       #print("send information to the server failed for $!");
       close(SERVER);
       return 2; #返回2表示传送数据失败
    }
   
     #####################added by guoyan 2019.12.11   send bits.c to server
   # open(FILE,"$source_file") or die("open failed for $!");
    unless (open(FILE,"$source_file")) {
	#print("open bits.c failed for $!");
        close(SERVER);
	return 4; #返回4表示bits.c打开失败
    } 
   
   print "Sending bits.c to the server\n";
   # binmode(FILE);
    seek(FILE,0,0);
    while(!eof(FILE)){
            read(FILE,$buffer,100);
            $status = print SERVER $buffer;
            #print "2. status is $status.\n";
             if($status == 0)
             {
       		#print("send bits.c to the server failed for $!");
       		close(SERVER);
       		return 3; #返回3表示传送数据失败
    	     }
            }#while
    
    print SERVER "sending bits.c finished!\n";
    close(FILE);
    #close SERVER;
    ##############################################added by guoyan 2021.11.2
     # Establish the connection to the server ~~~~~~~~~~~~~~~~~~~~~2 
   
    #socket(SERVER, PF_INET, SOCK_STREAM, getprotobyname('tcp'));
    #$internet_addr = inet_aton($hostname)
     #   or die "Could not convert $hostname to an internet address: $!\n";
    #$paddr = sockaddr_in($port, $internet_addr);
    #connect(SERVER, $paddr)
    #    or die "Could not connect to $hostname:$port:$!\n";

    #select((select(SERVER), $| = 1)[0]); # enable command buffering
    
    # Get first HTTP response line
    print "receiving errcode from the server.\n";
    $line = <SERVER>;  #receive status from server   errcode=1 userid or password is invalid;errcode=0 OK 
    chomp($line);
    ($http_version, $errcode, $errmsg) = split(/\s+/, $line);

    # Read the remaining HTTP response header lines
    #while ($line = <SERVER>) {
    #    if ($line =~ /^\r\n/) {
    #        last;
     #   }
    #}

    # Read and return the response from the result server
    #$line = <SERVER>;
    #chomp($line);
    print "close the connect.\n";
    close SERVER;
    return $errcode;
    
}

#
# url_encode - Encode text string so it can be included in URI of GET request
#
sub url_encode ($) {
    my $value = shift;

    $value =~s/([^a-zA-Z0-9_\-.])/uc sprintf("%%%02x",ord($1))/eg;
    return $value;
}

# Always end a module with a 1 so that it returns TRUE
1;

